 <!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Universal Extension Build Script.
   -
   - The Initial Developer of the Original Code is
   -     Dave Townsend <dave.townsend@blueprintit.co.uk>.
   - Portions created by the Initial Developer are Copyright (C) 2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK *****
   -
   - $HeadURL$
   - $LastChangedBy$
   - $Date$
   - $Revision$
   -->

<project name="ExtensionBuild" default="package" basedir="../">

	<property name="mozillasrc" value="${basedir}/../../mozilla/mozilla"/>

	<property name="xpidl.includes" value="-I ${mozillasrc}/xpcom/base -I ${mozillasrc}/uriloader/base -I ${mozillasrc}/netwerk/base/public -I ${mozillasrc}/xpcom/io"/>

	<target name="init"
	  description="Initialises all propertys to their correct values.">
		
	  <!-- Load the extension propertys -->
	  <property file="${basedir}/extension.properties" prefix="extension"/>

	  <!-- Set suitable defaults in case there was no settings -->
	  <property name="builddir" value="${basedir}/bin"/>
		<property name="outputdir" value="${basedir}"/>
		<property name="releasedir" value="${basedir}"/>
	  
	  <!-- Set up the release, revision and standard builds -->
	  <condition property="extension.fullversion" value="${extension.version}.rev${extension.revision}" else="${extension.version}">
			<isset property="extension.revision"/>
	  </condition>
	  
	  <!-- This is the directory to place the completed package into -->
	  <condition property="targetdir" value="${releasedir}/${extension.name}" else="${outputdir}">
	  	<isset property="release"/>
	  </condition>
	  
	  <!-- Check if this is a branch build -->
	  <condition property="branchname" value="${extension.name}-${extension.branch}" else="${extension.name}">
	  	<isset property="extension.branch"/>
	  </condition>
	  
	  <!-- This is the final name for the xpi package -->
	  <condition property="packagename" value="${branchname}-${extension.version}" else="${branchname}">
	  	<isset property="release"/>
	  </condition>

	  <!-- Create the build directory and check if there are any components -->
	  <mkdir dir="${builddir}"/>
		<available property="hascomponents" file="${basedir}/components"/>
	  
	</target>
	
	<target name="clean" depends="init"
	  description="Cleans the build directory and output package">

	  <delete dir="${builddir}"/>
		<delete file="${targetdir}/${packagename}.xpi"/>
	</target>
	
	<target name="preprocess" depends="init"
	  description="Preprocesses any necessary input files">
	  
		<copy todir="${builddir}" overwrite="true">
			<fileset dir="${basedir}">
				<include name="**/*.in"/>
			</fileset>
			<mapper type="glob" from="*.in" to="*"/>
		  <filterset>
				<filter token="id" value="${extension.guid}"/>
				<filter token="version" value="${extension.fullversion}"/>
	  	</filterset>
		</copy>
	</target>
	
	<target name="components" if="hascomponents" depends="init"
	  description="Compiles any idl files to xpt">
  
		<apply executable="xpidl" dir="${basedir}/components" dest="${builddir}/components" failonerror="true">
			<mapper type="glob" from="*.idl" to="*.xpt"/>
			<fileset dir="${basedir}/components" includes="*.idl"/>
			<arg line="-m typelib -w -v"/>
			<arg line="${xpidl.includes} -e"/>
			<targetfile/>
		</apply>
	</target>
	
	<target name="copy" depends="init"
	  description="Copies all standard files to the build directory">
	  
		<copy todir="${builddir}">
			<fileset dir="${basedir}">
				<exclude name="extension.properties"/>      <!-- Don't want the properties in the build -->
				<exclude name="build/**"/>                  <!-- Don't want the build scripts either -->
				<exclude name="bin/**"/>                    <!-- Don't copy the build into itself -->
				<exclude name="**/*.in"/>                   <!-- The preprocessor will copy these across -->
				<exclude name="components/*.idl"/>          <!-- These are headers to be compiled by xpidl -->
				<exclude name="*.xpi"/>                     <!-- Shouldn't package extensions within extensions -->
				<exclude name="**/*.pspimage"/>             <!-- These are likely to be high quality images -->
				<exclude name="**/Thumbs.db"/>              <!-- Don't want windows files -->
				<exclude name=".*"/>                        <!-- No unix hidden files -->
 				<exclude name=".externalToolBuilders/*"/>   <!-- Eclipse specific files -->
			</fileset>
		</copy>
	</target>
	
	<target name="compile" depends="init,copy,preprocess,components"
	  description="Dummy task that performs everything necessary to make the build directory a working extension.">
	  
	</target>
	
	<target name="revision-package" depends="init,compile,package"
	  description="Creates a revision stamped package of the extension.">
	    
		<delete file="${revisiondir}/${packagename}-${extension.version}.rev${extension.revision}.xpi"/>
		<zip basedir="${builddir}" destfile="${revisiondir}/${packagename}-${extension.version}.rev${extension.revision}.xpi"/>
	</target>
	
	<target name="package" depends="init,compile"
	  description="Packages the extension into an xpi file.">
	  
		<zip basedir="${builddir}" destfile="${targetdir}/${packagename}.xpi"/>
	</target>
	
</project>
